{"version":3,"file":"static/js/429.67cb1ef2.chunk.js","mappings":"wMACaA,EAAS,WACpB,OACEC,EAAAA,EAAAA,KAACC,EAAAA,GAAK,CACJC,OAAO,KACPC,MAAM,KACNC,OAAO,IACPC,MAAM,QACNC,UAAU,UACVC,cAAY,EACZC,cAAY,GAGlB,C,6HCEA,EAfiB,SAAHC,GAA8C,IAAxCC,EAAOD,EAAPC,QAASC,EAASF,EAATE,UAAWC,EAAYH,EAAZG,aACtC,OACEC,EAAAA,EAAAA,MAAA,MAAIC,MAAO,CAAEC,UAAW,QAASC,SAAA,EAC/BhB,EAAAA,EAAAA,KAAA,OACEiB,IACEL,EAAY,kCAAAM,OAC0BN,GAClC,8BAENO,IAAKR,KAEPX,EAAAA,EAAAA,KAAA,MAAIc,MAAO,CAAEM,SAAU,OAAQC,SAAU,SAAUL,SAAEL,MAThBD,EAY3C,E,SCXAY,EAAgCC,EAAQ,KAAhCC,EAAQF,EAARE,SAAUC,EAASH,EAATG,UACVC,EAAcH,EAAQ,IAAtBG,UAsCR,EArCa,WACX,IAAQC,EAAYD,IAAZC,QACRC,EAA0BJ,EAAS,IAAGK,GAAAC,EAAAA,EAAAA,GAAAF,EAAA,GAA/BG,EAAKF,EAAA,GAAEG,EAAQH,EAAA,GACtBI,EAA8BT,GAAS,GAAMU,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,EAA0Bb,EAAS,IAAGc,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAxBE,GAAFD,EAAA,GAAUA,EAAA,IAiBtB,OAhBAb,GAAU,WACR,IAAMe,EAAQ,eAAA/B,GAAAgC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAA,OAAAF,IAAAA,MAAA,SAAAG,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAGK,OAHLF,EAAAC,KAAA,EAEbP,EAAS,IACTH,GAAW,GAAOS,EAAAE,KAAA,GACCC,EAAAA,EAAAA,IAAcrB,GAAS,KAAD,EAAnCiB,EAAIC,EAAAI,KACVjB,EAASY,EAAKM,MAAML,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAM,GAAAN,EAAA,SAEpBN,EAASM,EAAAM,GAAMC,SAAS,QAEN,OAFMP,EAAAC,KAAA,GAExBV,GAAW,GAAOS,EAAAQ,OAAA,6BAAAR,EAAAS,OAAA,GAAAX,EAAA,wBAErB,kBAXa,OAAAlC,EAAA8C,MAAA,KAAAC,UAAA,KAYd7B,GAAWa,GACb,GAAG,CAACb,KAGFd,EAAAA,EAAAA,MAAA,OAAKC,MAAO,CAAE2C,WAAY,OAAQC,UAAW,QAAS1C,SAAA,EACpDhB,EAAAA,EAAAA,KAAA,MAAAgB,SAAI,UACHmB,IAAWnC,EAAAA,EAAAA,KAACD,EAAAA,EAAM,KACnBC,EAAAA,EAAAA,KAAA,MAAIc,MAAO,CAAE6C,QAAS,OAAQC,SAAU,OAAQC,IAAK,QAAS7C,SACtD,OAALe,QAAK,IAALA,OAAK,EAALA,EAAO+B,KAAI,SAAAC,GAAA,IAAGrD,EAAOqD,EAAPrD,QAASC,EAASoD,EAATpD,UAAWC,EAAYmD,EAAZnD,aAAY,OAC7CZ,EAAAA,EAAAA,KAACgE,EAAQ,CACPtD,QAASA,EACTC,UAAWA,EACXC,aAAcA,GACJ,QAKtB,C","sources":["components/Loader/Loader.jsx","components/CastItem/CastItem.jsx","pages/Cast/Cast.jsx"],"sourcesContent":["import { Audio } from 'react-loader-spinner';\nexport const Loader = () => {\n  return (\n    <Audio\n      height=\"80\"\n      width=\"80\"\n      radius=\"9\"\n      color=\"green\"\n      ariaLabel=\"loading\"\n      wrapperStyle\n      wrapperClass\n    />\n  );\n};\n","const CastItem = ({ cast_id, character, profile_path }) => {\n  return (\n    <li style={{ listStyle: 'none' }} key={cast_id}>\n      <img\n        src={\n          profile_path\n            ? `https://image.tmdb.org/t/p/w200${profile_path}`\n            : 'http://placehold.it/200x300'\n        }\n        alt={character}\n      />\n      <h2 style={{ textWrap: 'wrap', maxWidth: '200px' }}>{character}</h2>\n    </li>\n  );\n};\nexport default CastItem;\n","import { getCastsMovie } from 'Api/serviseMovies/serviseMovies';\nimport CastItem from 'components/CastItem/CastItem';\nimport { Loader } from 'components/Loader/Loader';\nconst { useState, useEffect } = require('react');\nconst { useParams } = require('react-router-dom');\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [casts, setCasts] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState('');\n  useEffect(() => {\n    const getCasts = async () => {\n      try {\n        setError('');\n        setLoading(false);\n        const data = await getCastsMovie(movieId);\n        setCasts(data.cast);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    movieId && getCasts();\n  }, [movieId]);\n\n  return (\n    <div style={{ marginLeft: '60px', marginTop: '60px' }}>\n      <h1>Casts</h1>\n      {loading && <Loader />}\n      <ul style={{ display: 'flex', flexWrap: 'wrap', gap: '12px' }}>\n        {casts?.map(({ cast_id, character, profile_path }) => (\n          <CastItem\n            cast_id={cast_id}\n            character={character}\n            profile_path={profile_path}\n          ></CastItem>\n        ))}\n      </ul>\n    </div>\n  );\n};\nexport default Cast;\n"],"names":["Loader","_jsx","Audio","height","width","radius","color","ariaLabel","wrapperStyle","wrapperClass","_ref","cast_id","character","profile_path","_jsxs","style","listStyle","children","src","concat","alt","textWrap","maxWidth","_require","require","useState","useEffect","useParams","movieId","_useState","_useState2","_slicedToArray","casts","setCasts","_useState3","_useState4","loading","setLoading","_useState5","_useState6","setError","getCasts","_asyncToGenerator","_regeneratorRuntime","_callee","data","_context","prev","next","getCastsMovie","sent","cast","t0","message","finish","stop","apply","arguments","marginLeft","marginTop","display","flexWrap","gap","map","_ref2","CastItem"],"sourceRoot":""}